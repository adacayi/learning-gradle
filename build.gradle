plugins {
    id 'org.springframework.boot' version '2.2.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "com.github.spotbugs" version "4.2.4"
    id "org.sonarqube" version "2.8"
    id 'checkstyle'
    id 'jacoco'
}

group = 'uk.co.sancode'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    isProd = System.properties['isProd'] == 'true'
    liquibaseVersion = "3.9.0"
}

spotbugsTest.enabled = false
checkstyleTest.enabled = false

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'org.liquibase:liquibase-core:' + liquibaseVersion
    implementation 'com.github.spotbugs:spotbugs:4.0.3'
    implementation 'org.modelmapper:modelmapper:2.3.7'

    // Test

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'


    // Profiles

    if (isProd) {
        testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    } else {
        implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    }
}

test {
    useJUnitPlatform()
    exclude "**/*Component*"
}

task componentTest(type: Test) {
    useJUnitPlatform()
    include "**/*Component*"
}

check.dependsOn componentTest
check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
    dependsOn tasks.withType(Test)
    executionData tasks.withType(Test)

    reports {
        xml.enabled = true
    }
}

project.tasks["sonarqube"].dependsOn "jacocoTestReport"

jacocoTestCoverageVerification {
    executionData tasks.withType(Test)
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}


file("sonar.properties").withReader {
    Properties sonarProperties = new Properties()
    sonarProperties.load(it)

    sonarProperties.each { key, value ->
        sonarqube {
            properties {
                property key, value
            }
        }
    }
}